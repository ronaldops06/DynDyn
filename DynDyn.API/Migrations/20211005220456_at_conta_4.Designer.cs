// <auto-generated />
using System;
using DynDyn.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DynDyn.API.Migrations
{
    [DbContext(typeof(DyndynContext))]
    [Migration("20211005220456_at_conta_4")]
    partial class at_conta_4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("DynDyn.API.Models.Categoria", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("DynDyn.API.Models.Conta", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoriaID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContaPaiID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CategoriaID");

                    b.HasIndex("ContaPaiID");

                    b.ToTable("Contas");
                });

            modelBuilder.Entity("DynDyn.API.Models.Movimento", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContaID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacao")
                        .HasColumnType("TEXT");

                    b.Property<int>("OperacaoID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Valor")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ContaID");

                    b.HasIndex("OperacaoID");

                    b.ToTable("Movimentos");
                });

            modelBuilder.Entity("DynDyn.API.Models.Operacao", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoriaID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<int>("Recorrente")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CategoriaID");

                    b.ToTable("Operacoes");
                });

            modelBuilder.Entity("DynDyn.API.Models.Saldo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Acumulado")
                        .HasColumnType("REAL");

                    b.Property<int>("ContaID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Credito")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataSaldo")
                        .HasColumnType("TEXT");

                    b.Property<double>("Debito")
                        .HasColumnType("REAL");

                    b.Property<double>("Dividendos")
                        .HasColumnType("REAL");

                    b.Property<double>("Entrada")
                        .HasColumnType("REAL");

                    b.Property<double>("Rendimento")
                        .HasColumnType("REAL");

                    b.Property<double>("Saida")
                        .HasColumnType("REAL");

                    b.Property<double>("Valor")
                        .HasColumnType("REAL");

                    b.Property<double>("Valorizacao")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ContaID");

                    b.ToTable("Saldos");
                });

            modelBuilder.Entity("DynDyn.API.Models.Conta", b =>
                {
                    b.HasOne("DynDyn.API.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DynDyn.API.Models.Conta", "ContaPai")
                        .WithMany()
                        .HasForeignKey("ContaPaiID");

                    b.Navigation("Categoria");

                    b.Navigation("ContaPai");
                });

            modelBuilder.Entity("DynDyn.API.Models.Movimento", b =>
                {
                    b.HasOne("DynDyn.API.Models.Conta", "Conta")
                        .WithMany()
                        .HasForeignKey("ContaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DynDyn.API.Models.Operacao", "Operacao")
                        .WithMany()
                        .HasForeignKey("OperacaoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conta");

                    b.Navigation("Operacao");
                });

            modelBuilder.Entity("DynDyn.API.Models.Operacao", b =>
                {
                    b.HasOne("DynDyn.API.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("DynDyn.API.Models.Saldo", b =>
                {
                    b.HasOne("DynDyn.API.Models.Conta", "Conta")
                        .WithMany()
                        .HasForeignKey("ContaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conta");
                });
#pragma warning restore 612, 618
        }
    }
}
